From bec1ee39a6e930fdc25ab6925889d7b74345620d Mon Sep 17 00:00:00 2001
From: Ralf Gommers <ralf.gommers@gmail.com>
Date: Tue, 9 May 2023 21:55:27 +0200
Subject: [PATCH 9/9] BLD: fix yet another PROPACK build issue

The `setup.py` code is written kinda strangely, but checking the
build logs it is clear that the only OpenMP related flag is used
is `-U_OPENMP`, which undefines `_OPENMP` and hence the OpenMP
code in PROPACK is not used.

The define in the meson.build file was incorrectly done for C rather
than Fortran.

[skip cirrus] [skip circle]
---
 scipy/sparse/linalg/_propack/meson.build | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/scipy/sparse/linalg/_propack/meson.build b/scipy/sparse/linalg/_propack/meson.build
index b201691a6..abdf14914 100644
--- a/scipy/sparse/linalg/_propack/meson.build
+++ b/scipy/sparse/linalg/_propack/meson.build
@@ -85,11 +85,11 @@ elements = [
   ['_zpropack', z_src, 'zpropack.pyf']
 ]
 
-cargs_propack = ['-D_OPENMP']  # FIXME: _OPENMP is needed now, but not good!
+fargs_propack = ['-U_OPENMP']
 if use_g77_abi
   # This define needs to be removed from PROPACK code, in favor of using
   # `wcdotc` unconditionally, like is done in ARPACK.
-  cargs_propack += ['-DSCIPY_USE_G77_CDOTC_WRAP=1']
+  fargs_propack += ['-DSCIPY_USE_G77_CDOTC_WRAP=1']
 endif
 foreach ele: elements
   # PROPACK integration is pretty much broken, see for example gh-15108.
@@ -97,8 +97,8 @@ foreach ele: elements
   # architectures (stated reason: "it blows up").
   propack_lib = static_library('lib_' + ele[0],
     ele[1],
-    c_args: cargs_propack,
     fortran_args: [
+      fargs_propack,
       fortran_ignore_warnings, 
       _fflag_Wno_intrinsic_shadow,
       _fflag_Wno_uninitialized,

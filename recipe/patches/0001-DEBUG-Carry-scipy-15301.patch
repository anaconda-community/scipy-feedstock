From 5e1c8150c4468cc7863e18e13d38f6fb3be3578f Mon Sep 17 00:00:00 2001
From: Ralf Gommers <ralf.gommers@gmail.com>
Date: Tue, 28 Dec 2021 14:48:42 +0100
Subject: [PATCH 1/3] DEBUG: Carry scipy#15301

TST: bump test tolerance for propack float32/complex64 test

This test is new, and is showing failures on multiple configs
when testing 1.8.0rc2 on conda-forge. See
https://github.com/conda-forge/scipy-feedstock/pull/198#issuecomment-999180432

[ci skip]

TST: change seed for a lobpcg test

This test is new in 1.8.x, and was observed to fail on macOS + BLIS
in conda-forge testing. Should be a minor problem, but anyway having
a seed that's not zero is not a bad thing. So let's hope this is a more
robust seed.

TST: bump tolerance on a sparse.linalg.lsqr test

Observed to slightly exceed the current tolerances on macOS + BLIS
in conda-forge testing of 1.8.0rc2 - see
https://github.com/conda-forge/scipy-feedstock/pull/198#issuecomment-999180432

TST: bump test precision on a `sparse.linalg.svds` test

It was failing (only just) on macOS x86 + MKL in conda-forge testing:
```
___________ Test_SVDS_PROPACK.test_svd_random_state_3[random_state2] ___________
../[...]/lib/python3.8/site-packages/scipy/sparse/linalg/_eigen/tests/test_svds.py:368: in test_svd_random_state_3

    assert_allclose(uh_u, np.identity(k), atol=atol, rtol=rtol)
E   AssertionError:
E   Not equal to tolerance rtol=1e-06, atol=1e-10
E
E   Mismatched elements: 2 / 25 (8%)
E   Max absolute difference: 1.25789171e-10
E   Max relative difference: 4.21884749e-15
```

[ci skip]

TST: bump tolerance on `sparse.linalg.lsqr` test, add doc note
---
 .../linalg/_eigen/lobpcg/tests/test_lobpcg.py       |  2 +-
 scipy/sparse/linalg/_eigen/tests/test_svds.py       |  4 ++--
 scipy/sparse/linalg/_isolve/tests/test_lsqr.py      | 13 +++++++++----
 scipy/sparse/linalg/tests/test_propack.py           |  7 +++++--
 4 files changed, 17 insertions(+), 9 deletions(-)

diff --git a/scipy/sparse/linalg/_eigen/lobpcg/tests/test_lobpcg.py b/scipy/sparse/linalg/_eigen/lobpcg/tests/test_lobpcg.py
index 00880cf1c..d42653f15 100644
--- a/scipy/sparse/linalg/_eigen/lobpcg/tests/test_lobpcg.py
+++ b/scipy/sparse/linalg/_eigen/lobpcg/tests/test_lobpcg.py
@@ -222,7 +222,7 @@ def test_fiedler_large_12():
 def test_failure_to_run_iterations():
     """Check that the code exists gracefully without breaking. Issue #10974.
     """
-    rnd = np.random.RandomState(0)
+    rnd = np.random.RandomState(4120349)
     X = rnd.standard_normal((100, 10))
     A = X @ X.T
     Q = rnd.standard_normal((X.shape[0], 4))
diff --git a/scipy/sparse/linalg/_eigen/tests/test_svds.py b/scipy/sparse/linalg/_eigen/tests/test_svds.py
index dec6a4fcf..7cef69c91 100644
--- a/scipy/sparse/linalg/_eigen/tests/test_svds.py
+++ b/scipy/sparse/linalg/_eigen/tests/test_svds.py
@@ -365,8 +365,8 @@ class SVDSCommonTests:
         # not necessarily identical - results
         res1a = svds(A, k, solver=self.solver, random_state=random_state)
         res2a = svds(A, k, solver=self.solver, random_state=random_state)
-        _check_svds(A, k, *res1a, rtol=1e-6)
-        _check_svds(A, k, *res2a, rtol=1e-6)
+        _check_svds(A, k, *res1a, atol=2e-10, rtol=1e-6)
+        _check_svds(A, k, *res2a, atol=2e-10, rtol=1e-6)
 
         message = "Arrays are not equal"
         with pytest.raises(AssertionError, match=message):
diff --git a/scipy/sparse/linalg/_isolve/tests/test_lsqr.py b/scipy/sparse/linalg/_isolve/tests/test_lsqr.py
index 8d3557a32..bb2ca702c 100644
--- a/scipy/sparse/linalg/_isolve/tests/test_lsqr.py
+++ b/scipy/sparse/linalg/_isolve/tests/test_lsqr.py
@@ -20,18 +20,23 @@ for jj in range(5):
 
 b = normal(size=n)
 
-tol = 1e-10
+# tolerance for atol/btol keywords of lsqr()
+tol = 2e-10
+# tolerances for testing the results of the lsqr() call with assert_allclose
+# These tolerances are a bit fragile - see discussion in gh-15301.
+atol_test = 4e-10
+rtol_test = 2e-8
 show = False
 maxit = None
 
 
-def test_basic():
+def test_lsqr_basic():
     b_copy = b.copy()
     xo, *_ = lsqr(G, b, show=show, atol=tol, btol=tol, iter_lim=maxit)
     assert_array_equal(b_copy, b)
 
     svx = np.linalg.solve(G, b)
-    assert_allclose(xo, svx, atol=tol, rtol=tol)
+    assert_allclose(xo, svx, atol=atol_test, rtol=rtol_test)
 
     # Now the same but with damp > 0.
     # This is equivalent to solving the extented system:
@@ -44,7 +49,7 @@ def test_basic():
     Gext = np.r_[G, damp * np.eye(G.shape[1])]
     bext = np.r_[b, np.zeros(G.shape[1])]
     svx, *_ = np.linalg.lstsq(Gext, bext, rcond=None)
-    assert_allclose(xo, svx, atol=tol, rtol=tol)
+    assert_allclose(xo, svx, atol=atol_test, rtol=rtol_test)
 
 
 def test_gh_2466():
diff --git a/scipy/sparse/linalg/tests/test_propack.py b/scipy/sparse/linalg/tests/test_propack.py
index 502ea608d..55ffa5bc9 100644
--- a/scipy/sparse/linalg/tests/test_propack.py
+++ b/scipy/sparse/linalg/tests/test_propack.py
@@ -111,10 +111,13 @@ def test_svdp(ctor, precision, irl, which):
 @pytest.mark.parametrize('precision', _dtype_testing)
 @pytest.mark.parametrize('irl', (False, True))
 def test_examples(precision, irl):
+    # Note: atol for complex8 bumped from 1e-4 to 1e-3 because of test failures
+    # with BLIS, Netlib, and MKL+AVX512 - see
+    # https://github.com/conda-forge/scipy-feedstock/pull/198#issuecomment-999180432
     atol = {
-        'single': 1e-4,
+        'single': 1.2e-4,
         'double': 1e-9,
-        'complex8': 1e-4,
+        'complex8': 1e-3,
         'complex16': 1e-9,
     }[precision]
 
-- 
2.32.0.windows.2

